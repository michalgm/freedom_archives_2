CONFIG_FILE="../config/production.json"

# Extract remote database connection details
export PGHOST=db
# export PGHOST=$(jq -r '.postgresql.connection.host' $CONFIG_FILE)
# export PGPASSWORD=$(jq -r '.postgresql.connection.password' $CONFIG_FILE)
# REMOTE_SCHEMA=$(jq -r '.postgresql.searchPath[0]' $CONFIG_FILE)
export PGUSER=$(jq -r '.postgresql.connection.user // env.USER' $CONFIG_FILE)
# REMOTE_DB=$(jq -r '.postgresql.connection.database // env.USER' $CONFIG_FILE)

SSH_USER="freedomarchives"
SSH_HOST=$(jq -r '.postgresql.connection.host' $CONFIG_FILE)

pg_dump() {
    ssh $SSH_USER@$SSH_HOST "docker compose -f ~/docker-postgres/docker-compose.yml run -i --rm --remove-orphans --env-from-file ~/docker-postgres/${PGUSER}.env db pg_dump" "$(printf "%q " "$@")"
}

psql() {
    ssh $SSH_USER@$SSH_HOST "docker compose -f ~/docker-postgres/docker-compose.yml run -i --rm --remove-orphans --env-from-file ~/docker-postgres/${PGUSER}.env db psql" "$(printf "%q " "$@")"
}

pg_restore() {
    ssh $SSH_USER@$SSH_HOST "docker compose -f ~/docker-postgres/docker-compose.yml run -i --rm --remove-orphans --env-from-file ~/docker-postgres/${PGUSER}.env db pg_restore" "$(printf "%q " "$@")"
}

# ls_test() {
#     # ssh freedomarchives@$PGHOST "ls $@"
#     ssh freedomarchives@$PGHOST "docker compose -f ~/docker-postgres/docker-compose.yml run -i --rm --remove-orphans db ls $@"
# }

##############################
## POSTGRESQL BACKUP CONFIG ##
##############################

# Optional system user to run backups as.  If the user the script is running as doesn't match this
# the script terminates.  Leave blank to skip check.
BACKUP_USER=

# Optional hostname to adhere to pg_hba policies.  Will default to "localhost" if none specified.
HOSTNAME=$PGHOST

# Optional username to connect to database as.  Will default to "postgres" if none specified.
USERNAME=$PGUSER

# This dir will be created if it doesn't exist.  This must be writable by the user the script is
# running as.
BACKUP_DIR=./db_backup/

# List of strings to match against in database name, separated by space or comma, for which we only
# wish to keep a backup of the schema, not the data. Any database names which contain any of these
# values will be considered candidates. (e.g. "system_log" will match "dev_system_log_2010-01")
SCHEMA_ONLY_LIST=""

# Will produce a custom-format backup if set to "yes"
ENABLE_CUSTOM_BACKUPS=yes

# Will produce a gzipped plain-format backup if set to "yes"
ENABLE_PLAIN_BACKUPS=yes

# Will produce gzipped sql file containing the cluster globals, like users and passwords, if set to "yes"
ENABLE_GLOBALS_BACKUPS=no


#### SETTINGS FOR ROTATED BACKUPS ####

# Which day to take the weekly backup from (1-7 = Monday-Sunday)
DAY_OF_WEEK_TO_KEEP=5

# Number of days to keep daily backups
DAYS_TO_KEEP=7

# How many weeks to keep weekly backups
WEEKS_TO_KEEP=5

######################################